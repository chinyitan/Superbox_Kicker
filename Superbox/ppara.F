c
c******************************************************************
c
      subroutine ppara (version,cl)
c
c     this routine creates a log-file
c
      include 'super.cb'
c
      integer i
      character host*32,date*26,version*(*),cl*(*),yn*3
      character outp(12)*12
c      
c
      outp(1) =  ' rcore    : '
      outp(2) =  ' rout     : '
      outp(3) =  ' rsystem  : '
      outp(4) =  ' enh1     : '
      outp(5) =  ' enh2     : '
      outp(6) =  ' enh3     : '
      outp(7) =  ' enh4     : '
      outp(8) =  ' enh5     : '
      outp(9) =  ' mtot     :               '
      outp(10) = ' mass     :              '
      outp(11) = ' trial dt : '
c     
      write (unit,'(/,a)') 'Output generated by SUPERBOX'
      write (unit,'(a)') ' '
      write (unit,'(a,a)') 'Version  : ',version
      write (unit,'(a)') ' '
      write (unit,'(a,a)') 'Commandline argument   : ',cl
      write (unit,'(a)') ' '
      write (unit,'(a,/)') 'Control - Parameters :'
c     
      if (model.eq.0) then
         write (unit,'(a)') 
     &             'transforming physical units into model units'
      else
         write (unit,'(a)') 'no transformation of units performed'
      endif
      write (unit,'(a)') '  '
      write (unit,'(a)') ' Conversion factors: 1 m.u. = ... ' 

c++   For output reasons - need to re-instate conversion factors .. 

      if( model .gt. 0.5 ) then 

      rpc = 'pc'
      if( unitl .gt. .5 ) rpc = 'Kpc' 
      munit = 'solar' 
      tunit = 'Myrs'
      scl = fh(57,1) 
      scm = fh(56,1) 
      sct = fh(58,1)
      scv = fh(59,1)
      endif 
c++
#ifdef FORT90 
      write(unit,'(4(a,Es12.2,1x,a))')
#else 
      write(unit,'(4(a,E12.3,1x,a))')
#endif  
     & ' L= ',1./scl, rpc,'; M= ',1./scm, munit, '; T= ',
     & 1./sct, tunit,'; V= ',1./scv,' km/s' 
      write(unit,*)
c
      if (origin.eq.0) then
         write (unit,'(a)') 'grids are focused on   : center of mass'
      else
         write (unit,'(a)') ' grids are focused on  : center of density'
      endif
      write (unit,'(a,i4,/)') 'Number of mesh points =  ', n
c     
      write (unit,'(a,i7)') 'Number of galaxies     : ',gnum
      write (unit,'(a,i7)') 'Total number of stars  : ',istno
      write (unit,'(a,i7)') 'First integration step : ',ih(3)+1
      write (unit,'(a,i7)') 'Last  integration step : ',ih(4)
      write (unit,'(a)') ' '
c
      do 10 i = 1,gnum
c
         write (unit,'(a)') ' '
         write (unit,'(a,i2)') 'Galaxy No : ',i
         write (unit,'(a)') ' '
         write (unit,'(a,i7)') ' Number of particles    : ',gstno(i)
         write (unit,'(a)') ' '
         yn = 'no'
         if (tfreq(i).gt.0) yn = 'yes'
         write (unit,'(a,a)') ' save some data         : ',yn
         if (tfreq(i).gt.0) then
            write(unit,'(a,i6)') '                 start  : ',
     $           tstart(i)
            write(unit,'(a,i6)') '                 stop   : ',
     $           tstop(i)
         endif
         write (unit,'(a)') '  '
         write (unit,'(a,a)') '                  physical',
     $                    '                  model'
         write (unit,'(a)') ' '
         write (unit,11) outp(1),rcore(i)/scl,rpc,rcore(i)
         write (unit,11) outp(2),rout(i)/scl,rpc,rout(i)
         write (unit,11) outp(3),rsystem(1)/scl,rpc,rsystem(i)
         write (unit,1) outp(4),enh1(i)/scl,'          ',enh1(i)
         write (unit,1) outp(5),enh2(i)/scl,'          ',enh2(i)
         write (unit,1) outp(6),enh3(i)/scl,'          ',enh3(i)
         write (unit,1) outp(7),enh4(i)/scl,'          ',enh4(i)
         write (unit,1) outp(8),enh5(i)/scl,'          ',enh5(i)
         write (unit,2) outp(9),mtot(i)/scm,' Msun    ',mtot(i)
         write (unit,2) outp(10),mass(i)/scm,' Msun    ',mass(i)
         write (unit,1) outp(11),(dt(i)/sct),' Myrs     ',dt(i)
         write (unit,'(a)') ' '
        
c++   Reinstate m.u. for the rest of the output .. 

      if( model .gt. 0.5 ) then 
         rpc = 'm.u.'
         munit = 'm.u.'
         tunit = rpc 

         scl = 1.
         sct = 1.
         scm = 1.
         scv = 1.
      endif 
c++
         write (unit,'(a,a,a)') ' center of mass  [', rpc, ']   : '
         write (unit,'(a,f10.5,a,f10.5,a,f10.5)') 
     $   '  gcms-xyz  = ',gcms(1,i)/scl,'  ',gcms(2,i)/scl,'  ',
     $    gcms(3,i)/scl
         write (unit,'(a,f10.5,a,f10.5,a,f10.5)') 
     $   '  gcms-vel  = ',gcms(4,i)/scv,'  ',gcms(5,i)/scv,'  ',
     $    gcms(6,i)/scv
         write (unit,'(a)') ' '
         if (origin.eq.1) then
            write (unit,'(a,a,a)') ' center of density [', rpc,'] : '
            write (unit,'(a,f10.5,a,f10.5,a,f10.5)') 
     $  '  dcms-xyz = ',dgcms(1,i)/scl,'  ',dgcms(2,i)/scl,'  ',
     $   dgcms(3,i)/scl
            write (unit,'(a,f10.5,a,f10.5,a,f10.5)') 
     $  '  dcms-vel = ',dgcms(4,i)/scv,'  ',dgcms(5,i)/scv,'  ',
     $   dgcms(6,i)/scv
         write (unit,'(a)') ' '
         endif
c
 10   continue
c
#ifdef FORT90
 1    format (a,4x,f10.5,a,4x,es10.4)
 11   format (a,4x,f10.5,1x,a,9x,es10.4)
 2    format (a,es18.5,a,es12.5)
#else 
 1    format (a,4x,f10.5,a,4x,e10.5)
 11   format (a,4x,f10.5,1x,a,9x,e10.4)
 2    format (a,e18.6,a,e12.6)
#endif 

      return
c     
      end
